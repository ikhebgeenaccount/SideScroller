//Movement based on NavMesh

//Class variables
private boolean jumping;
private int jumpStartTick;
private final int JUMP_LENGTH_TICK = 20;

public void update(){
	tick++;

	//Variables to check for animations
	boolean moveLeft = false, moveRight = false, moveUp = false, moveDown = false;
	
	//Check left and right movement
	if(keys[KeyEvent.VK_LEFT]){
		moveLeft = character.moveLeft(navMesh);
	}
	if(keys[KeyEvent.VK_RIGHT]){
		moveRight = character.moveRight(navMesh);
	}

	if(keys[KeyEvent.VK_UP]){
		if(!jumping){
			//If character can move down, it is not possible to jump, and vice versa
			jumping = !character.moveDown(navMesh);
			
			//If jumping = false, the character moved down, so we need to move him up again
			//Otherwise, we start the jump by setting jumpStartTick and setting initial yspeed
			if(!jumping){
				character.moveUp(navMesh);
			}else{
				jumpStartTick = tick;
				character.accelerate(19);
			}
		}
	}
	
	if(jumping){
		if(tick - jumpStartTick <= JUMP_LENGTH_TICK){
			//Still jumping
			moveUp = character.moveUp(navMesh);
		}else{
			//Not jumping anymore
			jumping = false;
		}
		if(!moveUp){
			//character was not able to move up, stop jumping
			jumping = false;
		}else{
			//character was able to jump, decelerate
			character.accelerate(-1);
		}
	}else{
		//Not jumping, check if character should fall
		moveDown = character.moveDown(navMesh);
		if(moveDown){
			character.accelerate(1);
		}else{
			character.resetSpeed()
		}
	}
		
		
		
		
		
		